{
  "challenges": [
    {
      "name": "Braces",
      "difficulty": "Hard",
      "description": "<p>Write a function that takes a string of braces, and determines if the order of the braces is valid. It should return true if the string is valid, and false if it's invalid. All input strings will be nonempty, and will only consist of parentheses, brackets and curly braces: ()[]{}.</p>",
      "examples": "<div>\"(){}[]\" => True<br />\"([{}])\" => True<br />\"(}\" => False<br />\"[(])\" => False<br />\"[({})](]\" => False </div>",
      "snippet": "public static bool validBraces(String braces)\n{\n\treturn false;\n}",
      "solution": "public static bool validBraces(string braces)\n{\n\tvar st = new Stack<char>();\n\tforeach (var c in braces)\n\t\tswitch (c)\n\t\t{\n\t\t\tcase '(':\n\t\t\tcase '[':\n\t\t\tcase '{':\n\t\t\t\tst.Push(c);\n\t\t\t\tcontinue;\n\t\t\tcase ')':\n\t\t\t\tif (st.Count == 0 || st.Pop() != '(') return false;\n\t\t\t\tcontinue;\n\t\t\tcase ']':\n\t\t\t\tif (st.Count == 0 || st.Pop() != '[') return false;\n\t\t\t\tcontinue;\n\t\t\tcase '}':\n\t\t\t\tif (st.Count == 0 || st.Pop() != '{') return false;\n\t\t\t\tcontinue;\n\t\t}\n\treturn st.Count == 0;\n}",
      "tests": [
        {
          "append": "\nreturn validBraces(\"[()]\");",
          "testAgainst": "true"
        },
        {
          "append": "\nreturn validBraces(\"[(])\");",
          "testAgainst": "false"
        }
      ]
    },
    {
      "name": "Prime",
      "difficulty": "Mid",
      "description": "<p>Define a function that takes an integer argument and returns logical value true or false depending on if the integer is a prime.\nPer Wikipedia, a prime number(or a prime) is a natural number greater than 1 that has no positive divisors other than 1 and itself.</p>",
      "examples": "<div>is_prime(1)  => false<br/>is_prime(2)  => true<br/>is_prime(-1) => false<br/></div>",
      "snippet": "public static bool IsPrime(int n)\n{\n\treturn false;\n}",
      "solution": "public static bool IsPrime(int n)\n{\n\tif (n <= 2 || n % 2 == 0) return n == 2;\n\tfor (int i = 3; i <= Math.Sqrt(n); i += 2) if (n % i == 0) return false;\n\treturn true;\n}",
      "tests": [
        {
          "append": "\nreturn IsPrime(1);",
          "testAgainst": "false"
        },
        {
          "append": "\nreturn IsPrime(2);",
          "testAgainst": "true"
        },
        {
          "append": "\nreturn IsPrime(16);",
          "testAgainst": "false"
        },
        {
          "append": "\nreturn IsPrime(11);",
          "testAgainst": "true"
        }
      ]
    },
    {
      "name": "Rot13",
      "difficulty": "Mid",
      "description": "<p>ROT13 is a simple letter substitution cipher that replaces a letter with the letter 13 letters after it in the alphabet.ROT13 is an example of the Caesar cipher.<br/>Create a function that takes a string and returns the string ciphered with Rot13. If there are numbers or special characters included in the string, they should be returned as they are. Only letters from the latin/english alphabet should be shifted, like in the original Rot13 \"implementation\".</p>",
      "examples": "<div>Rot13(Grfg) => \"Test\"</div>",
      "snippet": "public static string Rot13(string message)\n{\n\t// your code here\n}",
      "solution": "public static string Rot13(string message)\n{\n\treturn String.Join(\"\", message.Select(x => char.IsLetter(x) ? (x >= 65 && x <= 77) || (x >= 97 && x <= 109) ? (char)(x + 13) : (char)(x - 13) : x));\n}",
      "tests": [
        {
          "append": "\nreturn Rot13(\"Grfg\");",
          "testAgainst": "Test"
        },
        {
          "append": "\nreturn Rot13(\"Grfgf\");",
          "testAgainst": "Tests"
        }
      ]
    },
    {
      "name": "Multiple Of 3 or 5",
      "difficulty": "Easy",
      "description": "<p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.<br/>Finish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.<br/>Note: If the number is a multiple of both 3 and 5, only count it once.</p>",
      "examples": "<div> Solution(10) => 23</div>",
      "snippet": "public static int Solution(int value)\n{\n\t// Magic Happens\n}",
      "solution": "public static int Solution(int value) => Enumerable.Range(0, value).Where(x => x % 3 == 0 || x % 5 == 0).Sum();",
      "tests":  [
        {
          "append": "\nreturn Solution(10);",
          "testAgainst": "23"
        }
      ]
    },
    {
      "name": "Abbreviate Name",
      "difficulty": "Easy",
      "description": "<p>Write a function to convert a name into initials. This kata strictly takes two words with one space in between them.<br/>\nThe output should be two capital letters with a dot separating them.</p>",
      "examples": "<div>Sam Harris => S.H<br/>Patrick Feeney => P.F</div>",
      "snippet": "public static string AbbrevName(string name)\n{\n\treturn \"\";\n}",
      "solution": "public static string AbbrevName(string name)\n{\n\tvar wordArray = name.Split(\" \");\n\tvar firstLetter = wordArray[0][0];\n\tvar secondLetter = wordArray[1][0];\n\treturn $\"{firstLetter.ToString().ToUpper()}.{secondLetter.ToString().ToUpper()}\";\n}",
      "tests": [
        {
          "append": "\nreturn AbbrevName(\"Adam Holm\");",
          "testAgainst": "A.H"
        },
        {
          "append": "\nreturn AbbrevName(\"Kdam Holm\");",
          "testAgainst": "K.H"
        }
      ]
    },
    {
      "name": "Re-weight weights",
      "difficulty": "Hard",
      "description": "<p>You are a member of the \"Fat Club (FC)\". Each month a list with the weights of members is published and each month you are the last on the list which means you are the heaviest.\nLuckily you are the one who establishes the list so you decided to attribute a \"weight\" to numbers. The weight of a number will be from now on the sum of its digits.\n For example 99 will have \"weight\" 18, 100 will have \"weight\" 1 so in the list 100 will come before 99. Given a string with the weights of FC members in normal order can you give this string ordered by \"weights\" of these numbers?\n When two numbers have the same \"weight\", order them as if they were strings (alphabetical ordering) and not numbers: 100 is before 180 because its \"weight\" (1) is less than the one of 180 (9) and 180 is before 90 since, having the same \"weight\" (9), its char value comes before it as a string.</p>",
      "examples": "<div>\"56 65 74 100 99 68 86 180 90\" => \"100 180 90 56 65 74 68 86 99\"</div>",
      "snippet": "public static string orderWeight(string s) {\n\t// your code\n}",
      "solution": "public static string orderWeight(string s)\n{\n\treturn string.Join(\" \", s.Split(' ')\n\t\t.OrderBy(n => n.ToCharArray()\n\t\t.Select(c => (int)char.GetNumericValue(c)).Sum())\n\t\t.ThenBy(n => n));\n}",
      "tests": [
        {
          "append": "\nreturn orderWeight(\"56 65 74 100 99 68 86 180 90\");",
          "testAgainst": "100 180 90 56 65 74 68 86 99"
        },
        {
          "append": "\nreturn orderWeight(\"103 123 4444 99 2000\");",
          "testAgainst": "2000 103 123 4444 99"
        },
        {
          "append": "\nreturn orderWeight(\"2000 10003 1234000 44444444 9999 11 11 22 123\");",
          "testAgainst": "11 11 2000 10003 22 123 1234000 44444444 9999"
        }
      ] 
    },
    //{
    //  "name": "Big Number",
    //  "difficulty": "Mid",
    //  "description": "<p>Write a function that returns the sum of two large numbers. The input numbers are strings and the function must return a string.</p><ul><li>The input numbers are big.</li><li>The input is a string of only digits</li><li>The numbers are positives</li></ul>",
    //  "examples": "<div>add(\"123\", \"321\"); -> \"444\"<br/>add(\"11\", \"99\");   -> \"110\"",
    //  "snippet": "public static string Add(string a, string b)\n{\n\treturn a + b; // Fix this!\n}}",
    //  "solution": "public static string Add(string a, string b)\n{\n\treturn (BigInteger.Parse(a) + BigInteger.Parse(b)).ToString();\n}",
    //  "tests": [
    //    {
    //      "append": "\nreturn Add(\"3333333333\", \"2222222222\");",
    //      "testAgainst": "\"5555555555\"‬"
    //    },
    //    {
    //      "append": "\nreturn Add(\"2333333334\", \"3222222225\");",
    //      "testAgainst": "\"5555555559\"‬"
    //    }
    //  ]
    //},
    {
      "name": "Integer ToIPv4",
      "difficulty": "Mid",
      "description": "<p>Take the following IPv4 address: 128.32.10.1</p><p>This address has 4 octets where each octet is a single byte (or 8 bits).</p><ul><li>1st octet 128 has the binary representation: 10000000</li><li>2nd octet 32 has the binary representation: 00100000</li><li>3rd octet 10 has the binary representation: 00001010</li><li>4th octet 1 has the binary representation: 00000001</li></ul><p>So 128.32.10.1 == 10000000.00100000.00001010.00000001</p><p>Because the above IP address has 32 bits, we can represent it as the unsigned 32 bit number: 2149583361</p><p>Complete the function that takes an unsigned 32 bit number and returns a string representation of its IPv4 address.</p>",
      "examples": "<div>2149583361 ==> \"128.32.10.1\"<br/>32         ==> \"0.0.0.32\"<br/>0          ==> \"0.0.0.0\"</div>",
      "snippet": "public static string UInt32ToIP(uint ip)\n{\n\t//...\n}",
      "solution": "public static string UInt32ToIP(uint ip)\n{\n\tvar bytter = BitConverter.GetBytes(ip).Reverse().ToArray();\n\treturn new IPAddress(bytter).MapToIPv4().ToString();\n}",
      "tests": [
        {
          "append": "\nreturn UInt32ToIP(2154959208);",
          "testAgainst": "128.114.17.104"
        },
        {
          "append": "\nreturn UInt32ToIP(0);",
          "testAgainst": "0.0.0.0"
        },
        {
          "append": "\nreturn UInt32ToIP(2149583361);",
          "testAgainst": "128.32.10.1"
        }
      ]
    }
  ] 
}
